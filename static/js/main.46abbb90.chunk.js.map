{"version":3,"sources":["components/welcome/welcome.js","components/anime/anime.js","App.js","serviceWorker.js","index.js"],"names":["c1style","background","color","padding","c2style","c3style","welcome","react_default","a","createElement","className","renderprops","from","opacity","marginLeft","to","config","molasses","props","style","marginTop","delay","gentle","marginBottom","wobbly","App","Fragment","AppBar","react_confetti_min_default","components_welcome_welcome","anime_anime","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAqEMA,EAAU,CACdC,WAAY,YACZC,MAAO,QACPC,QAAS,UAELC,EAAU,CACdH,WAAY,UACZC,MAAO,QACPC,QAAS,UAELE,EAAU,CACdJ,WAAY,UACZC,MAAO,QACPC,QAAS,UAGIG,EAjFC,WACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACE,EAAA,OAAD,CACEC,KAAM,CAAEC,QAAS,EAAGC,YAAa,KACjCC,GAAI,CAAEF,QAAS,EAAGC,WAAY,GAC9BE,OAAQA,SAAOC,UAEd,SAAAC,GAAK,OACJX,EAAAC,EAAAC,cAAA,OAAKU,MAAOD,GACVX,EAAAC,EAAAC,cAAA,OAAKU,MAAOnB,GACVO,EAAAC,EAAAC,cAACE,EAAA,OAAD,CACEC,KAAM,CAAEC,QAAS,EAAGO,WAAY,KAChCL,GAAI,CAAEF,QAAS,EAAGO,UAAW,GAC7BJ,OAAQ,CAAEK,MAAO,MAEhB,SAAAH,GAAK,OAAIX,EAAAC,EAAAC,cAAA,MAAIU,MAAOD,GAAX,uBAMpBX,EAAAC,EAAAC,cAACE,EAAA,OAAD,CACEC,KAAM,CAAEC,QAAS,EAAGC,YAAa,KACjCC,GAAI,CAAEF,QAAS,EAAGC,WAAY,GAC9BE,OAAQA,SAAOM,QAEd,SAAAJ,GAAK,OACJX,EAAAC,EAAAC,cAAA,OAAKU,MAAOD,GACVX,EAAAC,EAAAC,cAAA,OAAKU,MAAOf,GACVG,EAAAC,EAAAC,cAACE,EAAA,OAAD,CACEC,KAAM,CAAEC,QAAS,EAAGU,cAAe,KACnCR,GAAI,CAAEF,QAAS,EAAGU,aAAc,GAChCP,OAAQ,CAAEK,MAAO,MAEhB,SAAAH,GAAK,OAAIX,EAAAC,EAAAC,cAAA,MAAIU,MAAOD,GAAX,2BAMpBX,EAAAC,EAAAC,cAACE,EAAA,OAAD,CACEC,KAAM,CAAEC,QAAS,EAAGC,YAAa,KACjCC,GAAI,CAAEF,QAAS,EAAGC,WAAY,GAC9BE,OAAQA,SAAOQ,QAEd,SAAAN,GAAK,OACJX,EAAAC,EAAAC,cAAA,OAAKU,MAAOD,GACVX,EAAAC,EAAAC,cAAA,OAAKU,MAAOd,GACVE,EAAAC,EAAAC,cAACE,EAAA,OAAD,CACEC,KAAM,CAAEC,QAAS,EAAGU,cAAe,KACnCR,GAAI,CAAEF,QAAS,EAAGU,aAAc,GAChCP,OAAQ,CAAEK,MAAO,MAEhB,SAAAH,GAAK,OACJX,EAAAC,EAAAC,cAAA,MAAIU,MAAOD,GAAX,kFClDHZ,SAJC,WACd,OAAOC,EAAAC,EAAAC,cAAA,qBCcMgB,MAbf,WACE,OACElB,EAAAC,EAAAC,cAACF,EAAAC,EAAMkB,SAAP,KACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,MACApB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,OAEFD,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,QCHcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.46abbb90.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./welcome.css\";\r\nimport { Spring, config } from \"react-spring/renderprops\";\r\n\r\nconst welcome = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <Spring\r\n        from={{ opacity: 0, marginLeft: -5000 }}\r\n        to={{ opacity: 1, marginLeft: 0 }}\r\n        config={config.molasses}\r\n      >\r\n        {props => (\r\n          <div style={props}>\r\n            <div style={c1style}>\r\n              <Spring\r\n                from={{ opacity: 0, marginTop: -5000 }}\r\n                to={{ opacity: 1, marginTop: 0 }}\r\n                config={{ delay: 1000 }}\r\n              >\r\n                {props => <h1 style={props}>Hello there..</h1>}\r\n              </Spring>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Spring>\r\n      <Spring\r\n        from={{ opacity: 0, marginLeft: -5000 }}\r\n        to={{ opacity: 1, marginLeft: 0 }}\r\n        config={config.gentle}\r\n      >\r\n        {props => (\r\n          <div style={props}>\r\n            <div style={c2style}>\r\n              <Spring\r\n                from={{ opacity: 0, marginBottom: -5000 }}\r\n                to={{ opacity: 1, marginBottom: 0 }}\r\n                config={{ delay: 2000 }}\r\n              >\r\n                {props => <h2 style={props}>Glad to see you..</h2>}\r\n              </Spring>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Spring>\r\n      <Spring\r\n        from={{ opacity: 0, marginLeft: -5000 }}\r\n        to={{ opacity: 1, marginLeft: 0 }}\r\n        config={config.wobbly}\r\n      >\r\n        {props => (\r\n          <div style={props}>\r\n            <div style={c3style}>\r\n              <Spring\r\n                from={{ opacity: 0, marginBottom: -5000 }}\r\n                to={{ opacity: 1, marginBottom: 0 }}\r\n                config={{ delay: 2000 }}\r\n              >\r\n                {props => (\r\n                  <h3 style={props}>We are currently in under development</h3>\r\n                )}\r\n              </Spring>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Spring>\r\n    </div>\r\n  );\r\n};\r\nconst c1style = {\r\n  background: \"steelblue\",\r\n  color: \"white\",\r\n  padding: \"1.5rem\"\r\n};\r\nconst c2style = {\r\n  background: \"#5EC649\",\r\n  color: \"white\",\r\n  padding: \"1.5rem\"\r\n};\r\nconst c3style = {\r\n  background: \"#F7AF25\",\r\n  color: \"white\",\r\n  padding: \"1.5rem\"\r\n};\r\n\r\nexport default welcome;\r\n","import \"./anime.css\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport { Spring, config } from \"react-spring/renderprops\";\r\n\r\nconst welcome = () => {\r\n  return <h1>hello</h1>;\r\n};\r\n\r\nexport default welcome;\r\n","import React from \"react\";\r\nimport Welcome from \"./components/welcome/welcome\";\r\nimport Confetti from \"react-confetti\";\r\nimport \"./App.css\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Anime from \"./components/anime/anime\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar />\r\n      <div className=\"App\">\r\n        <Confetti />\r\n      </div>\r\n      <Welcome />\r\n      <Anime />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}